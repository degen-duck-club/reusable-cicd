name: reusable-unity-build

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_call:
    inputs:
      project_path:
        required: true
        type: string
      unity_version:
        required: false
        type: string
        default: 2022.1.6f1
      target_platform:
        required: false
        type: string
        default: WebGL
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

jobs:
  checklicense:
    name: Check for UNITY_LICENSE in GitHub Secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            export is_unity_license_set="${{ env.UNITY_LICENSE != '' }}"
            echo "is_unity_license_set=$is_unity_license_set" >> $GITHUB_OUTPUT

  activation:
    needs: checklicense
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request manual activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

#   test:
#     needs: checklicense
#     if: needs.checklicense.outputs.is_unity_license_set == 'true'
#     name: Run all tests âœ¨
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           lfs: true
#       - uses: actions/cache@v3
#         with:
#           path: Library
#           key: Library-test
#       - uses: game-ci/unity-test-runner@v2
#         id: testRunner
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           githubToken: ${{ secrets.GITHUB_TOKEN }}
#       - uses: actions/upload-artifact@v3
#         with:
#           name: Test results (all modes)
#           path: ${{ steps.testRunner.outputs.artifactsPath }}

  build:
    needs: checklicense
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v3
        with:
          name: duck_war_build
          path: build

#   build:
#     name: Build Unity
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           lfs: true

#       - name: Cache Library
#         uses: actions/cache@v3
#         with:
#           path: ./
#           key: Library-${{ github.sha }}
#           restore-keys: Library-

#       - name: build_unity_project
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

#         with:
#           projectPath: ${{ inputs.project_path }}
#           unityVersion: ${{ inputs.unity_version }}
#           targetPlatform: ${{ inputs.target_platform }}

#       - uses: actions/upload-artifact@v3
#         with:
#           name: duck_war_build
#           path: build
